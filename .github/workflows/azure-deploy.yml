name: Deploy HelloAzureAPI to Azure

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Needed to create tags and releases
      actions: read    # Needed to read workflow info

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for version calculation

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Calculate version
        id: version
        run: |
          # Get the latest tag, or use v1.0.0 if no tags exist
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.0.0")
          echo "Latest tag: $LATEST_TAG"
          
          # Extract version numbers
          VERSION=${LATEST_TAG#v}  # Remove 'v' prefix
          IFS='.' read -r -a VERSION_PARTS <<< "$VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          
          # Increment patch version
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="v$MAJOR.$MINOR.$NEW_PATCH"
          
          echo "New version: $NEW_VERSION"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "version_number=$MAJOR.$MINOR.$NEW_PATCH" >> $GITHUB_OUTPUT

      - name: Restore dependencies
        run: dotnet restore

      - name: Build project
        run: dotnet build --configuration Release --no-restore

      - name: Publish to folder
        run: dotnet publish -c Release -o ./publish

      - name: Deploy to Azure Web App (Production)
        uses: azure/webapps-deploy@v3
        with:
          app-name: helloazure-robert
          slot-name: production
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: ./publish

      - name: Wait for deployment to stabilize
        run: |
          echo "‚è≥ Waiting 45 seconds for deployment to stabilize..."
          sleep 45

      - name: Health check on production
        run: |
          PROD_URL="https://helloazure-robert.azurewebsites.net"
          echo "üîç Performing health check on production: $PROD_URL"
          
          # Try to reach the health endpoint
          for i in {1..6}; do
            if curl -f -s "$PROD_URL/health" > /dev/null; then
              echo "‚úÖ Production health check passed!"
              break
            else
              echo "‚ö†Ô∏è Attempt $i failed, retrying in 15 seconds..."
              if [ $i -eq 6 ]; then
                echo "‚ùå Production health check failed after 6 attempts"
                echo "üîÑ Deployment may need manual verification or rollback"
                exit 1
              fi
              sleep 15
            fi
          done

      - name: Post-deployment verification
        run: |
          PROD_URL="https://helloazure-robert.azurewebsites.net"
          echo "üîç Final verification of deployment..."
          
          # Test the health endpoint response
          HEALTH_RESPONSE=$(curl -s "$PROD_URL/health")
          if [[ $HEALTH_RESPONSE == *"Healthy"* ]]; then
            echo "‚úÖ Health endpoint is responding correctly!"
            echo "Health status: $HEALTH_RESPONSE"
          else
            echo "‚ö†Ô∏è Health endpoint response seems incorrect"
            echo "Response: $HEALTH_RESPONSE"
          fi
          
          # Also test the weather API
          WEATHER_RESPONSE=$(curl -s "$PROD_URL/weatherforecast" | head -c 100)
          if [[ $WEATHER_RESPONSE == *"temperatureC"* ]]; then
            echo "‚úÖ Weather API is also working!"
            echo "Sample weather response: $WEATHER_RESPONSE..."
          else
            echo "‚ö†Ô∏è Weather API may have issues"
            echo "Response: $WEATHER_RESPONSE"
          fi

      - name: Create and push tag
        if: success()
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a ${{ steps.version.outputs.version }} -m "Release ${{ steps.version.outputs.version }} - Auto-deployment to Azure"
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git ${{ steps.version.outputs.version }}

      - name: Create GitHub Release
        if: success()
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          release_name: Release ${{ steps.version.outputs.version }}
          body: |
            üöÄ **Automated Release ${{ steps.version.outputs.version }}**
            
            **Deployment Details:**
            - Deployed to: helloazure-robert.azurewebsites.net
            - Build Date: ${{ github.event.head_commit.timestamp }}
            - Commit: ${{ github.sha }}
            - Author: ${{ github.event.head_commit.author.name }}
            
            **Changes:**
            ${{ github.event.head_commit.message }}
          draft: false
          prerelease: false
